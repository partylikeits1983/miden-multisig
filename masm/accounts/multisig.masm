use.miden::contracts::wallets::basic->wallet
use.miden::account
use.miden::note
use.miden::tx

use.std::crypto::dsa::rpo_falcon512
use.std::sys

# CONSTANTS
# AdviceMap Keys
const.THRESHOLD_KEY=5000
const.NOTE_DATA_KEY=6000

# Runtime Memory Addresses
const.LOOP_ITER=100
const.ITERATIONS_MEM_ADDR=104
const.TEMP_PK=108
const.MESSAGE=112

# ERRORS
const.NON_CONSTANT_MSG=1111
const.INVALID_OUTPUT_NOTES=2222

# => [PK]
proc.verify_owner
    push.1
    # => [index, PK]

    exec.account::get_map_item
    # => [IS_OWNER]

    push.1.1.1.1
    # => [TRUE, IS_OWNER]

    assert_eqw
    # => []
end

# => [iterations]
proc.verify_threshold
    push.THRESHOLD_KEY.0.0.0
    # => [THRESHOLD_KEY, iterations]

    push.1
    # => [index, THRESHOLD_KEY, iterations]

    exec.account::get_map_item
    # => [THRESHOLD_VALUE, iterations]

    drop drop drop
    # => [threshold, iterations]

    assert_eq
    # => []
end

# Assert that all the messages of the signatures are the same
# => [MSG, PK]
proc.verify_constant_msg
    mem_load.LOOP_ITER
    # => [iteration, MSG, PK]

    push.0
    # => [0, iteration, MSG, PK]

    eq
    # => [eq, MSG, PK]

    if.true
        # => [MSG, PK]

        mem_storew.MESSAGE
        # => [MSG, PK]
    else
        # => [MSG, PK]

        dupw padw
        # => [ZERO, MSG, MSG, PK]

        mem_loadw.MESSAGE
        # => [MESSAGE, MSG, MSG, PK]

        assert_eqw.err=NON_CONSTANT_MSG
        # => [MSG, PK]
    end

    # => [MSG, PK]
end

proc.verify_signatures_loop
    mem_store.ITERATIONS_MEM_ADDR

    push.0
    # => [iteration]

    mem_store.LOOP_ITER
    # => []

    push.1
    while.true
        mem_load.LOOP_ITER
        # => [iteration]

        push.0.0.0
        # => [KEY]

        adv.push_mapval
        # => [KEY]

        adv_pipe
        # => [MSG, PK, EMPTY, WORD]

        swapw.3 dropw swapw dropw
        # => [PK, MSG]

        swapw
        # => [MSG, PK]

        exec.verify_constant_msg
        # => [MSG, PK]

        swapw
        # => [PK, MSG]

        mem_storew.TEMP_PK
        # => [PK, MSG]

        exec.rpo_falcon512::verify
        # => []

        mem_loadw.TEMP_PK
        # => [PUB_KEY]

        exec.verify_owner
        # => []

        mem_load.LOOP_ITER
        # => [iteration]

        mem_load.ITERATIONS_MEM_ADDR

        lt
        if.true
            mem_load.LOOP_ITER
            push.1 add
            mem_store.LOOP_ITER

            push.1
        else
            push.0
        end
    end

end

# main entrypoint ->
# OS => [number_of_iterations]
# AS map => {0: SIG_0, 1: SIG_1, n: SIG_N}
export.exec_transaction
    exec.verify_signatures_loop
    # => []

    mem_load.LOOP_ITER
    # => [iterations-1]

    # adding bc iter starts from 0
    push.1 add
    # => [iterations]

    exec.verify_threshold
    # => []

    # At this point, all execution is authorized
    # ______________________________________
    push.NOTE_DATA_KEY.0.0.0

    adv.push_mapval dropw
    # => []

    adv_loadw
    padw adv_loadw
    padw adv_loadw
    # => [tag, aux, note_type, execution_hint, RECIPIENT, ASSET]

    call.wallet::create_note
    # => [note_idx, ASSET]

    movdn.5
    # => [ASSET, note_idx]

    call.wallet::move_asset_to_note
    # => [ASSET]

    dropw
    # => []

    exec.tx::get_output_notes_commitment
    # => [OUTPUT_NOTES_COMMITMENT]

    padw mem_loadw.MESSAGE
    # => [MSG, OUTPUT_NOTES_COMMITMENT]

    assert_eqw.err=INVALID_OUTPUT_NOTES

    # increment nonce
    push.1 exec.account::incr_nonce

    exec.sys::truncate_stack
    # => []
end

# Helper Functions

# Helper function for consuming P2ID notes
# *super vulnerability*
# eventually will be behind auth similar to exec_transaction
export.authenticate_consumption
    push.1 exec.account::incr_nonce
end
