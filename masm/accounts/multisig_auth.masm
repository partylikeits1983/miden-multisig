use.miden::account
use.miden::tx
# use.miden::account_delta

use.std::crypto::dsa::rpo_falcon512
use.std::crypto::hashes::rpo
use.std::sys

# CONSTANTS
# AdviceMap Keys
const.THRESHOLD_KEY=5000
const.NOTE_DATA_KEY=6000

# Runtime Memory Addresses
const.LOOP_ITER=100
const.ITERATIONS_MEM_ADDR=104
const.TEMP_PK=108
const.MESSAGE=112

# ERRORS
const.NON_CONSTANT_MSG="NON CONSTANT SIGNATURES"
const.INVALID_OUTPUT_NOTES="INVALID OUTPUT NOTES"

# => [PK]

proc.verify_owner
    push.1
    # => [index, PK]

    exec.account::get_map_item
    # => [IS_OWNER]

    push.1.1.1.1
    # => [TRUE, IS_OWNER]

    assert_eqw
    # => []
end

# => [iterations]

proc.verify_threshold
    push.THRESHOLD_KEY.0.0.0
    # => [THRESHOLD_KEY, iterations]

    push.1
    # => [index, THRESHOLD_KEY, iterations]

    push.434 debug.stack drop

    exec.account::get_map_item
    # => [THRESHOLD_VALUE, iterations]

    push.555 debug.stack drop

    drop drop drop
    # => [threshold, iterations]

    assert_eq
    # => []
end

# Assert that all the messages of the signatures are the same
# => [MSG, PK]

proc.verify_constant_msg
    mem_load.LOOP_ITER
    # => [iteration, MSG, PK]

    push.0
    # => [0, iteration, MSG, PK]

    eq
    # => [eq, MSG, PK]

    if.true
        # => [MSG, PK]

        mem_storew.MESSAGE
        # => [MSG, PK]

    else
        # => [MSG, PK]

        dupw padw
        # => [ZERO, MSG, MSG, PK]

        mem_loadw.MESSAGE
        # => [MESSAGE, MSG, MSG, PK]

        assert_eqw.err=NON_CONSTANT_MSG
        # => [MSG, PK]
    end

    # => [MSG, PK]
end

proc.verify_signatures_loop
    mem_store.ITERATIONS_MEM_ADDR

    push.0
    # => [iteration]

    mem_store.LOOP_ITER
    # => []

    push.1
    while.true
        mem_load.LOOP_ITER
        # => [iteration]

        push.0.0.0
        # => [KEY]

        adv.push_mapval
        # => [KEY]

        adv_pipe
        # => [MSG, PK, EMPTY, WORD]

        swapw.3 dropw swapw dropw
        # => [PK, MSG]

        swapw
        # => [MSG, PK]

        exec.verify_constant_msg
        # => [MSG, PK]

        swapw
        # => [PK, MSG]

        mem_storew.TEMP_PK
        # => [PK, MSG]

        exec.rpo_falcon512::verify
        # => []

        mem_loadw.TEMP_PK
        # => [PUB_KEY]

        exec.verify_owner
        # => []

        mem_load.LOOP_ITER
        # => [iteration]

        mem_load.ITERATIONS_MEM_ADDR

        lt
        if.true
            mem_load.LOOP_ITER
            push.1 add
            mem_store.LOOP_ITER

            push.1
        else
            push.0
        end
    end

end

# main entrypoint ->
# OS => [number_of_iterations]
# AS map => {0: SIG_0, 1: SIG_1, n: SIG_N}
export.auth__exec_transaction

    # Verifying owner signautres
    # ______________________________________

    # @dev this is the number of signatures to verify
    # technically this could always be the threshold value
    # since this would be the minimum number of signatures needed to check
    # 0 = 1 iteration
    push.2
    # => [iterations-1]

    exec.verify_signatures_loop
    # => []

    push.111 debug.stack drop

    mem_load.LOOP_ITER
    # => [iterations-1]

    # adding bc iter starts from 0
    push.1 add
    # => [iterations]

    push.222 debug.stack drop

    exec.verify_threshold
    # => []

    push.111 debug.stack drop

    # Signatures Verified to be owner signatures
    # ______________________________________

    # exec.account_delta::compute_commitment
    push.1.1.1.1
    # => [ACCOUNT_DELTA_COMMITMENT]

    exec.tx::get_input_notes_commitment
    # => [INPUT_NOTES_COMMITMENT, ACCOUNT_DELTA_COMMITMENT]

    exec.tx::get_output_notes_commitment
    # => [OUTPUT_NOTES_COMMITMENT, INPUT_NOTES_COMMITMENT, ACCOUNT_DELTA_COMMITMENT]

    # TODO: lookup salt from adviceProvider
    push.2.2.2.2
    # => [SALT, OUTPUT_NOTES_COMMITMENT, INPUT_NOTES_COMMITMENT, ACCOUNT_DELTA_COMMITMENT]

    mem_storew.12 dropw mem_storew.8 dropw mem_storew.4 dropw mem_storew.0 dropw

    push.16.0
    exec.rpo::hash_memory_words
    # => [DIGEST]

    padw mem_loadw.MESSAGE
    # => [MSG, DIGEST]

    push.555 debug.stack drop

    assert_eqw.err=INVALID_OUTPUT_NOTES

    # increment nonce
    push.1 exec.account::incr_nonce

    exec.sys::truncate_stack
    # => []
end
